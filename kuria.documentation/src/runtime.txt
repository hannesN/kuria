== Kuria Runtime ==

The runtime library specifies the classes which are used to bind the widget with the edited model, 
hence these classes are called bindings.

Bindings have two tasks:

* providing some configurations for the widget
* provide access to the property (read/write)

Bindings are generated by implementation of *IBindingFactory*. 
The factory generates an instance of *IBindungContainer* which contains bindings for a set of classes.
Some factories, like the *AnnotationBindingFactory* need some configuration, like the classes to parse.


The following chapters will explain the different bindings and their properties.
For every binding an interface and an example implementations for java beans exists.


=== Tablebindings ===

Tablebindings can be found in the package: *de.topicmapslab.kuria.runtime.table*.

.*ITableBinding*
The *ITableBinding* interface specifies a container which contains a list of *IColumnBinding* . The binding 
also contains the class which is bound.

.*IColumnBinding*
The *IColumnBinding* interface connects the property of the class with a column of a table. The column binding provides a title
of the column, which can be used as column header. It also provides a path to an image, which will be shown
left to the value of the property. In addition it provides access to the value of the property.

=== Treebindings ===

Treebindings can be found in the package: *de.topicmapslab.kuria.runtime.tree*.

.*ITreeNodeBinding*
The *ITreeNodeBinding* interface indicates that the represented object may be used as node in a tree. The
list of *IChildrenBinding* it provides contains bindings for the children of the node.

.*IChildrenBinding*
The *IChildrenBinding* interface is used to indicate which properties of an element which may be used as child nodes.
Every type of child has to have an *ITreeNodeBinding*.


=== InputMask ===

For every type of widget exists a corresponding binding. Every binding is inherits from 
*de.topicmapslab.kuria.runtime.IPropertyBinding*. 


.*IEditableBinding*
The *IEditableBinding* interface is used to bind a property container, usually a class with the _Kuria_ widget generators. 
It contains the bindings for every property of the container.

.*IPropertyBinding*
The *IPropertyBinding* interface provides access to the bound property. 
In addition it provides a label for the widget and the following flags:

* read only - indicates the property must not be modified
* optional - indicates the property is optional and their is not needed to be set
* isArray - indicates the property is an array
* is Collection - indicates the property is a java.util.Collection or of a subclass

The *IPropertyBinding* provides methods to access and modify the value of the property for a specific property container.

The following bindings inherit from *IPropertyBinding* and therefore get its properties.

.*ICheckBinding*
The *ICheckBinding* interface indicates the use of a check box for the property. Usually these properties have boolean values.


.*IComboBinding*  
The *ICheckBinding* interface is used to set a property based on given choice options. This is commonly used for non primitive types.
How the choices are provided is left to the widget implementation.

.*IDateBinding*  
The *IDateBinding* interface is used to specify the use of a widget for Dates. It is used for the data type _Date_.

.*IGroupBinding*
The *IGroupBinding* interface is used to embed another InputMask into the current one. This can be used if a property's type is
another property container of the domain model.

.*IListBinding*
The *IListBinding* interface is used to specify the widget for a collection of attributes. This collection may be shown inside a table
or rendered comma separated in a text field. The style is asked with the accessor *getListStyle* which returns a value of the enumeration
*ListStyle*:

 * *ListStyle.COMPACT* represents the text field version
 * *ListStyle.TABLE* represents the table version

.*ITextFieldBinding*
The *ITextFieldBinding* interface indicates that the properties value is shown in a text field. 
It has the following properties:

* row - The number of rows in the text field. If it is greater than 1 the text field is a multiline text field with the given rows.
* grabVerticalSpace - If this is _true_ the text field will vertically expand if their is enough place it in the input mask
* isPassword - Indicates if the text field should be a text field for passwords, which does not show the content of the text field.
* regExp - The regular expression is an additional way to validate the content. If you use it you need to set the regular expression like it is explained in http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/Pattern.html 
